// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  password   String
  followedBy Follows[] @relation("followedBy")
  following  Follows[] @relation("following")
  Profile    Profile?
  Post       Post[]
  Comment    Comment[]
}

model Profile {
  id             Int     @unique @default(autoincrement())
  bio            String?
  profilePicture String?
  user           User    @relation(fields: [userId], references: [id])
  userId         Int     @unique
}

model Follows {
  followedBy   User @relation("followedBy", fields: [followedById], references: [id])
  followedById Int
  following    User @relation("following", fields: [followingId], references: [id])
  followingId  Int

  @@id([followingId, followedById])
}

model Post {
  id        Int       @unique @default(autoincrement())
  createdAt DateTime  @default(now())
  author    User      @relation(fields: [authorId], references: [id])
  authorId  Int
  likes     Likes[]
  Comment   Comment[]
}

model Comment {
  id        Int      @unique @default(autoincrement())
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int

  @@map("comments")
}

model Likes {
  id     Int  @unique @default(autoincrement())
  post   Post @relation(fields: [postId], references: [id])
  postId Int  @unique
}
