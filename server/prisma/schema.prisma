// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  password String
  Profile  Profile?
  Post     Post[]
  Comment  Comment[]
  likes    Likes[]
}

model Profile {
  id             Int       @unique @default(autoincrement())
  bio            String?
  profilePicture String?
  followedBy     Follows[] @relation("followedBy")
  following      Follows[] @relation("following")
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId         Int       @unique
}

model Follows {
  followedBy   Profile @relation("followedBy", fields: [followedById], references: [id])
  followedById Int
  following    Profile @relation("following", fields: [followingId], references: [id])
  followingId  Int

  @@id([followingId, followedById])
}

model Post {
  id        Int       @unique @default(autoincrement())
  text      String
  createdAt DateTime  @default(now())
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId  Int
  Comment   Comment[]
  likes     Likes[]
}

model Comment {
  id        Int       @unique @default(autoincrement())
  text      String
  createdAt DateTime  @default(now())
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId  Int
  post      Post      @relation(fields: [postId], references: [id])
  postId    Int
  children  Comment[] @relation("Comment_Children")
  parentId  Int?
  parent    Comment?  @relation("Comment_Children", fields: [parentId], references: [id])
  likes     Likes[]

  @@map("comments")
}

model Likes {
  id        Int      @unique @default(autoincrement())
  postId    Int
  userId    Int
  commentId Int?
  comment   Comment? @relation(fields: [commentId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])

  @@unique([postId, userId])
}
